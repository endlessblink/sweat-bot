version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: sweatbot_postgres
    environment:
      POSTGRES_DB: hebrew_fitness
      POSTGRES_USER: fitness_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "8001:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/scripts/init_db.sql:/docker-entrypoint-initdb.d/init_db.sql
    networks:
      - sweatbot_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U fitness_user -d hebrew_fitness"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: sweatbot_redis
    ports:
      - "8003:6379"
    volumes:
      - redis_data:/data
    networks:
      - sweatbot_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}

  # MongoDB for Conversation Storage
  mongodb:
    image: mongo:latest
    container_name: sweatbot_mongodb
    environment:
      MONGO_INITDB_ROOT_USERNAME: sweatbot
      MONGO_INITDB_ROOT_PASSWORD: ${MONGODB_PASSWORD}
    ports:
      - "8002:27017"
    volumes:
      - mongodb_data:/data/db
    networks:
      - sweatbot_network
    restart: unless-stopped

  # Local Models Service - Whisper and Ollama for SweatBot
  volt-models:
    build:
      context: ./volt-models
      dockerfile: Dockerfile
    container_name: sweatbot_volt_models
    environment:
      - PORT=8006
      - OLLAMA_HOST=http://localhost:11434
      - MODEL_CACHE_DIR=/app/models
      - LOG_LEVEL=INFO
    ports:
      - "8006:8006"
    volumes:
      - ./volt-models:/app
      - whisper_models:/app/models/whisper
      - ollama_models:/app/models/ollama
    networks:
      - sweatbot_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8006/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 1G

  # FastAPI Backend
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: sweatbot_backend
    environment:
      - DATABASE_URL=postgresql+asyncpg://fitness_user:${POSTGRES_PASSWORD}@postgres:5432/hebrew_fitness
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - MONGODB_URL=mongodb://sweatbot:${MONGODB_PASSWORD}@mongodb:27017/
      - DATABASE_URL_EXTERNAL=postgresql+asyncpg://fitness_user:${POSTGRES_PASSWORD}@localhost:8001/hebrew_fitness
      - REDIS_URL_EXTERNAL=redis://:${REDIS_PASSWORD}@localhost:8003/0
      - MONGODB_URL_EXTERNAL=mongodb://sweatbot:${MONGODB_PASSWORD}@localhost:8002/
      - SECRET_KEY=${SECRET_KEY}
      - ALGORITHM=HS256
      - DEBUG=${DEBUG}
      - CORS_ORIGINS=http://localhost:8000,http://localhost:8004,http://localhost:4445
      - WHISPER_MODEL_SIZE=base
      - LOG_LEVEL=${LOG_LEVEL}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - GROQ_API_KEY=${GROQ_API_KEY}
      - GEMINI_API_KEY=${GEMINI_API_KEY}
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
      - whisper_models:/app/models
    networks:
      - sweatbot_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      mongodb:
        condition: service_started
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    command: >
      sh -c "python -m alembic upgrade head &&
             uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload"

  # Next.js Frontend
  # Note: Frontend now runs Vite with Volt Agent at port 8007
  # Use 'npm run dev' in personal-ui-vite directory instead of Docker
  # This allows direct browser API calls to Gemini/Groq
  
  # Commented out - run locally for API key access
  # frontend:
  #   build:
  #     context: ./personal-ui-vite
  #     dockerfile: Dockerfile
  #   container_name: sweatbot_frontend
  #   environment:
  #     - VITE_GEMINI_API_KEY=${GEMINI_API_KEY}
  #     - VITE_GROQ_API_KEY=${GROQ_API_KEY}
  #     - VITE_LOCAL_MODELS_URL=http://localhost:8006
  #     - VITE_BACKEND_URL=http://localhost:8000
  #   ports:
  #     - "8007:8007"
  #   volumes:
  #     - ./frontend:/app
  #     - /app/node_modules
  #     - /app/.next
  #   networks:
  #     - sweatbot_network
  #   depends_on:
  #     - backend
  #   restart: unless-stopped
  #   command: npm run dev

  # Nginx Load Balancer (Production)
  nginx:
    image: nginx:alpine
    container_name: sweatbot_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - nginx_logs:/var/log/nginx
    networks:
      - sweatbot_network
    depends_on:
      - backend
      - frontend
    restart: unless-stopped
    profiles:
      - production

  # MinIO Object Storage (Optional)
  minio:
    image: minio/minio:latest
    container_name: sweatbot_minio
    environment:
      MINIO_ACCESS_KEY: sweatbot_minio_access
      MINIO_SECRET_KEY: sweatbot_minio_secret
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    networks:
      - sweatbot_network
    restart: unless-stopped
    profiles:
      - storage
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # Prometheus Monitoring (Optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: sweatbot_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - sweatbot_network
    restart: unless-stopped
    profiles:
      - monitoring
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'

  # Grafana Dashboard (Optional)
  grafana:
    image: grafana/grafana:latest
    container_name: sweatbot_grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana:/etc/grafana/provisioning
    networks:
      - sweatbot_network
    depends_on:
      - prometheus
    restart: unless-stopped
    profiles:
      - monitoring

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  mongodb_data:
    driver: local
  ollama_models:
    driver: local
  whisper_models:
    driver: local
  minio_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  nginx_logs:
    driver: local

networks:
  sweatbot_network:
    driver: bridge